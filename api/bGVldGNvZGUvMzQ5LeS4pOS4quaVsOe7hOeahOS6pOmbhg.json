{"title":"349-两个数组的交集","date":"2023-01-31T10:48:57.000Z","date_formatted":{"ll":"Jan 31, 2023","L":"01/31/2023","MM-DD":"01-31"},"updated":"2023-03-31T11:45:37.372Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/solution/349-liang-ge-shu-zu-de-jiao-ji-ha-xi-bia-65mf/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给定两个数组 nums1 和 nums2 ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class=\"line\">输出：[2]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class=\"line\">输出：[9,4]</span><br><span class=\"line\">解释：[4,9] 也是可通过的</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums1.length, nums2.length &lt;= 1000</li>\n<li>0 &lt;= nums1[i], nums2[i] &lt;= 1000</li>\n</ul>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<ul>\n<li>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法了。这道题很明显的哈希表题目，用一个哈希表映射第一个数组，再查找第二个数组，如果已经存在就放在结果数组中，注意结果是去重的。</li>\n<li>再来看看哈希表的选择。<strong>直接使用set不仅占用空间比数组大，而且速度要比数组慢，set把数值映射到key上都要做hash计算的</strong>，因此优先使用数组。但是，<strong>使用数组来做哈希的题目，是因为题目都限制了数值的大小。而且如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费</strong>。因为题目限制数值最多为 1000，所以这道题可以用数组。</li>\n<li>思路很简单，具体看代码。</li>\n</ul>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"title function_\">intersection</span><span class=\"params\">(<span class=\"type\">int</span>* nums1, <span class=\"type\">int</span> nums1Size, <span class=\"type\">int</span>* nums2, <span class=\"type\">int</span> nums2Size, <span class=\"type\">int</span>* returnSize)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* result = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * fmin(nums1Size, nums2Size));</span><br><span class=\"line\">    <span class=\"type\">int</span> hash[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums1Size; i++) &#123;</span><br><span class=\"line\">        hash[nums1[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums2Size; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash[nums2[i]] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            result[resultSize++] = nums2[i];</span><br><span class=\"line\">            hash[nums2[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *returnSize = resultSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h3>\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O(1)</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>不想总结。。。</p>\n<h1 id=\"相关题目\">相关题目<a title=\"#相关题目\" href=\"#相关题目\"></a></h1>\n<ul>\n<li>350.两个数组的交集 II</li>\n</ul>\n","link":"leetcode/349-两个数组的交集","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/349-两个数组的交集/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"},{"id":"相关题目","title":"相关题目","index":"4"}],"reward":true,"copyright":{"published":"January 31, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/349-两个数组的交集/\" title=\"349-两个数组的交集\">https://hs-zhangsan.github.io/leetcode/349-两个数组的交集/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}