{"title":"19-删除链表的倒数第N个结点","date":"2023-01-27T11:52:22.000Z","date_formatted":{"ll":"Jan 27, 2023","L":"01/27/2023","MM-DD":"01-27"},"updated":"2023-03-31T11:45:37.367Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solution/by-taisui-kgok/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>\n<p>示例 1：</p>\n<p><img src=\"C:/Files/markdown-images/202301271154318.jpeg\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,4,5], n = 2</span><br><span class=\"line\">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1], n = 1</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2], n = 1</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>链表中结点的数目为 sz</li>\n<li>1 &lt;= sz &lt;= 30</li>\n<li>0 &lt;= Node.val &lt;= 100</li>\n<li>1 &lt;= n &lt;= sz</li>\n</ul>\n<p>进阶：你能尝试使用一趟扫描实现吗？</p>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<ul>\n<li><strong>链表问题首先考虑使用哑结点</strong>。观察一下这道题，是有可能处理头结点的，那就直接使用哑结点，避免单独处理特殊情况。</li>\n<li>这道题是一道双指针的经典题，使用快慢指针，让 fast 先走 n 步，然后 fast 和 slow 同时移动直到fast 指向链表末尾空结点，此时 slow指向的就是倒数第 n 个结点，然后删除结点即可。</li>\n<li>需要注意的是，由于删除结点的操作是：「让要删除节点的前一个结点的 next 越过要删除的节点指向其后一个结点」，要操作的结点是要删除的节点的前一个结点，因此 fast 实际上要先走 n+1 步而不是 n 步。此外注意 <code>return dummyHead-&gt;next</code> 而不是 <code>return head</code>。</li>\n<li>最后一定一定记得释放结点。</li>\n</ul>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">removeNthFromEnd</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head, <span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置哑结点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">dummyHead</span> =</span> <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    dummyHead-&gt;next = head;</span><br><span class=\"line\">    <span class=\"comment\">//设置双指针</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">fast</span> =</span> dummyHead;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">slow</span> =</span> dummyHead;</span><br><span class=\"line\">    <span class=\"comment\">//fast 先走 N+1 步</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        fast = fast-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fast = fast-&gt;next;</span><br><span class=\"line\">    <span class=\"comment\">//fast 和 slow 同时向后移动直到 fast 指向 NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast) &#123;</span><br><span class=\"line\">        fast = fast-&gt;next;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除结点并释放结点空间</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">temp</span> =</span> slow-&gt;next;</span><br><span class=\"line\">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">    <span class=\"comment\">//注意返回的是 dummy-&gt;next 而不是 head</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyHead-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h3>\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O(1)</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>这道题有印象，一眼快慢指针，然后秒了。再看了一下之前的题解，写的是真他妈得好，题解为了讲清楚是让 fast 初始化为 dummyHead，然后走 n+1 步，我这次直接让 fast 初始化为 head，就不用再单独让 fast 多走一步，作为题解肯定是之前的更清晰一点，只能说写的是真他妈得好。</p>\n<p>另外之前的题解有个评论说为什么不返回 head，感觉 head 也是可以的，犯了经典的错误，我还在题解中专门说了「此外注意 <code>return dummyHead-&gt;next</code> 而不是 <code>return head</code>」，链表内题目还是得多画一画，而不是只靠想。另外还有一个评论说没有释放结点。。。害，不光之前，这次也忘了，因为是在力扣上做题，所以真的没有意识到，要改要改。。。</p>\n<p>不管怎样，这题秒了终于让我找回一点自信了哭唧唧╥﹏╥…</p>\n","link":"leetcode/19-删除链表的倒数第N个结点","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/19-删除链表的倒数第N个结点/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"}],"reward":true,"copyright":{"published":"January 27, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/19-删除链表的倒数第N个结点/\" title=\"19-删除链表的倒数第N个结点\">https://hs-zhangsan.github.io/leetcode/19-删除链表的倒数第N个结点/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}