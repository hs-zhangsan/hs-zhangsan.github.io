{"title":"704-二分查找","date":"2023-01-17T19:56:44.000Z","date_formatted":{"ll":"Jan 17, 2023","L":"01/17/2023","MM-DD":"01-17"},"updated":"2023-03-31T11:45:37.373Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/binary-search\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/binary-search/solution/704-by-taisui-i8fp/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 9     </span><br><span class=\"line\">输出: 4       </span><br><span class=\"line\">解释: 9 出现在 nums 中并且下标为 4     </span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 2     </span><br><span class=\"line\">输出: -1        </span><br><span class=\"line\">解释: 2 不存在 nums 中因此返回 -1        </span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>你可以假设 nums 中的所有元素是不重复的。</li>\n<li>n 将在 [1, 10000]之间。</li>\n<li>nums 的每个元素都将在 [-9999, 9999]之间。</li>\n</ul>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<ul>\n<li>二分查找有两个前提，第一是**「有序排列」<strong>，第二是</strong>「无重复元素」**。当满足以上两点的时候就可以考虑是不是可以使用二分法了。（当然这道题题目已经说了是二分查找）</li>\n<li>二分法的逻辑较简单，需要注意的就是 <strong>边界条件</strong> ，例如循环判断条件到底是 <code>left &lt; right</code> 还是 <code>left &lt;= right</code> ？或者 <code>right = middle</code> 还是 <code>right = middle - 1</code>？<br>\n这里需要明确区间的定义，二分法的区间定义一般分为两种，一是左闭右闭 [left, right] ，另一种是左闭右开 [left, right) 。<br>\n以数组 [2, 3, 4, 5, 8, 9] 为例，一共 6 个元素，对应下标为 0-5，当区间定义为左闭右闭时，right 初始化为 5，对应的代码为 <code>left &lt;= right</code> 和 <code>right = middle - 1</code> ；当区间定义为左闭右开时，right 初始化为 6 <strong>（由于元素 nums[6] 无意义，所以边界 6 为开区间）</strong> ，对应的代码为 <code>left &lt; right</code> 和 <code>right = middle</code> 。</li>\n<li>两种定义方法选择一种固定使用就好，个人建议左闭右闭，因为右边界有意义，返回结果比较清晰直观。当然，适合自己就好。</li>\n</ul>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize, <span class=\"type\">int</span> target)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = numsSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> middle = left + ((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[middle] &gt; target) &#123;</span><br><span class=\"line\">            right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[middle] &lt; target) &#123;</span><br><span class=\"line\">            left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h3>\n<p>时间复杂度：O(logN)</p>\n<p>空间复杂度：O(N)</p>\n<p>PS：若题目要求时间复杂度带 logN ，一般要用到二分法。</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>二分查找比较简单，但是我好久没做题，今天刚上手结果就把二分查找的错误都犯了，具体就是忘了二分查找的关键，即边界条件，由此搞错了循环条件的小于还是小于等于，还有没找到时是等于 middle 还是 middle-1。</p>\n<p>还是不熟悉，太久没做连最基础的二分查找都忘了，一时不知该说什么。</p>\n<h1 id=\"相关题目\">相关题目<a title=\"#相关题目\" href=\"#相关题目\"></a></h1>\n<ul>\n<li>35.搜索插入位置</li>\n<li>34.在排序数组中查找元素的第一个和最后一个位置</li>\n<li>69.x 的平方根</li>\n<li>367.有效的完全平方数</li>\n</ul>\n","link":"leetcode/704-二分查找","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/704-二分查找/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"},{"id":"相关题目","title":"相关题目","index":"4"}],"reward":true,"copyright":{"published":"January 17, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/704-二分查找/\" title=\"704-二分查找\">https://hs-zhangsan.github.io/leetcode/704-二分查找/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}