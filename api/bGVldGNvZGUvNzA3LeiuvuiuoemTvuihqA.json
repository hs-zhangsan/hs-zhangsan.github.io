{"title":"707-设计链表","date":"2023-01-24T10:00:20.000Z","date_formatted":{"ll":"Jan 24, 2023","L":"01/24/2023","MM-DD":"01-24"},"updated":"2023-03-31T11:45:37.374Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/design-linked-list/\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/design-linked-list/solution/707-by-taisui-cxud/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p>\n<p>在链表类中实现这些功能：</p>\n<ul>\n<li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li>\n<li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>\n<li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li>\n<li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li>\n<li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLinkedList linkedList = new MyLinkedList();</span><br><span class=\"line\">linkedList.addAtHead(1);</span><br><span class=\"line\">linkedList.addAtTail(3);</span><br><span class=\"line\">linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3</span><br><span class=\"line\">linkedList.get(1);            //返回2</span><br><span class=\"line\">linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3</span><br><span class=\"line\">linkedList.get(1);            //返回3</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= index, val &lt;= 1000</li>\n<li>请不要使用内置的 LinkedList 库。</li>\n<li>get, addAtHead, addAtTail, addAtIndex 和 deleteAtIndex 的操作次数不超过 2000。</li>\n</ul>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<ul>\n<li>首先还是那句话，<strong>链表类题目无脑用虚拟头结点</strong>。在这道题中，由于要对用第一个结点进行操作，给出的指针又直接指向第一个结点，所以不用哑结点也没法操作。</li>\n<li>这道题涵盖了链表常见的所有操作，对于理解链表非常有帮助。所有操作的逻辑很简单，如果想不明白不要去硬想，找张纸画一画很容易就理解了。重点是具体的代码实现，可以对着我的代码理解一下，记一记就好了。</li>\n<li>在做这道题的时候我遇到了一个问题，在 <code>deleteAtIndex(index)</code> 操作中，如果我写成 <code>curr-&gt;next = curr-&gt;next-&gt;next</code> ，就会报如下的错误，而改成 <code>curr-&gt;next = temp-&gt;next</code> 就没有问题，也搞不懂为什么。</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: dereferencing pointer to incomplete type &#x27;struct MyLinkedList&#x27; [solution.c]</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义链表结点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyLinkedList</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; MyLinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化链表</span></span><br><span class=\"line\">MyLinkedList* <span class=\"title function_\">myLinkedListCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里的头结点是虚拟头结点（哑结点）</span></span><br><span class=\"line\">    MyLinkedList* head = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(MyLinkedList));</span><br><span class=\"line\">    head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回第 index 个结点的数值</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">myLinkedListGet</span><span class=\"params\">(MyLinkedList* obj, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    MyLinkedList* curr = obj-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; curr; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr-&gt;val;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curr = curr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在链表最前面插入一个节点结点</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">myLinkedListAddAtHead</span><span class=\"params\">(MyLinkedList* obj, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">    MyLinkedList* head = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(MyLinkedList));</span><br><span class=\"line\">    head-&gt;val = val;</span><br><span class=\"line\">    head-&gt;next = obj-&gt;next;</span><br><span class=\"line\">    obj-&gt;next = head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在链表最后面插入一个结点</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">myLinkedListAddAtTail</span><span class=\"params\">(MyLinkedList* obj, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">    MyLinkedList* curr = obj;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr-&gt;next) &#123;</span><br><span class=\"line\">        curr = curr-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyLinkedList* tail = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(MyLinkedList));</span><br><span class=\"line\">    tail-&gt;val = val;</span><br><span class=\"line\">    tail-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    curr-&gt;next = tail;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在链表第 index 个节点之前插入一个结点</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">myLinkedListAddAtIndex</span><span class=\"params\">(MyLinkedList* obj, <span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> &#123; </span><br><span class=\"line\">    MyLinkedList* curr = obj;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; curr; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == index) &#123;</span><br><span class=\"line\">            MyLinkedList* temp = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(MyLinkedList));</span><br><span class=\"line\">            temp-&gt;val = val;</span><br><span class=\"line\">            temp-&gt;next = curr-&gt;next;</span><br><span class=\"line\">            curr-&gt;next = temp;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curr = curr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除第 index 个结点</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">myLinkedListDeleteAtIndex</span><span class=\"params\">(MyLinkedList* obj, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    MyLinkedList* curr = obj;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; curr; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == index) &#123;</span><br><span class=\"line\">            MyLinkedList* temp = curr-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//下面这行代码如果改成 curr-&gt;next = curr-&gt;next-&gt;next 就会报错</span></span><br><span class=\"line\">                curr-&gt;next = temp-&gt;next;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curr = curr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除链表</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">myLinkedListFree</span><span class=\"params\">(MyLinkedList* obj)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (obj) &#123;</span><br><span class=\"line\">        MyLinkedList* temp = obj;</span><br><span class=\"line\">        obj = obj-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MyLinkedList struct will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MyLinkedList* obj = myLinkedListCreate();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = myLinkedListGet(obj, index);</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * myLinkedListAddAtHead(obj, val);</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * myLinkedListAddAtTail(obj, val);</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * myLinkedListAddAtIndex(obj, index, val);</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * myLinkedListDeleteAtIndex(obj, index);</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * myLinkedListFree(obj);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>基本都能写出来，但还是磕磕碰碰，免不了要看题解。</p>\n","link":"leetcode/707-设计链表","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/707-设计链表/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"}],"reward":true,"copyright":{"published":"January 24, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/707-设计链表/\" title=\"707-设计链表\">https://hs-zhangsan.github.io/leetcode/707-设计链表/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}