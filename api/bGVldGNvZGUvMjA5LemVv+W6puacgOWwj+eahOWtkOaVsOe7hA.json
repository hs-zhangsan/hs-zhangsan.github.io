{"title":"209-长度最小的子数组","date":"2023-01-21T10:46:02.000Z","date_formatted":{"ll":"Jan 21, 2023","L":"01/21/2023","MM-DD":"01-21"},"updated":"2023-03-31T11:45:37.369Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/solution/209-by-taisui-69y9/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>\n<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>\n<p>示例1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n<p>示例2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 4, nums = [1,4,4]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p>示例3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<ul>\n<li>我们很容易想到，这道题的暴力解法就是使用两个 for 循环不断寻找符合条件的子数组，这里不再赘述。</li>\n<li>先简单介绍一下滑动窗口，所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。滑动窗口是数组操作中一个重要的方法，本质上还是双指针法的一种。</li>\n<li>本题的关键在于窗口的起始位置如何移动，如以下代码所示：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (sum &gt;= target) &#123;    <span class=\"comment\">//若窗口内子数组和大于 target</span></span><br><span class=\"line\">    minLength = fmin(minLength, end - start + <span class=\"number\">1</span>);   <span class=\"comment\">//这里更新最小长度</span></span><br><span class=\"line\">    sum -= nums[start++];   <span class=\"comment\">//这里是滑动窗口的妙处所在，不断变更起始位置 start</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以发现滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将 $O(n^2)$ 的暴力解法降为 $O(n)$。</li>\n</ul>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里注意细节，求最小值时要将变量初始化为理论最大值。反之亦然。</span></span><br><span class=\"line\">    <span class=\"type\">int</span> minLength = INT_MAX;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;    <span class=\"comment\">//窗口内元素之和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>; end &lt; numsSize; end++) &#123;</span><br><span class=\"line\">        sum += nums[end];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sum &gt;= target) &#123;     <span class=\"comment\">//若窗口内子数组和大于 target</span></span><br><span class=\"line\">            minLength = fmin(minLength, end - start + <span class=\"number\">1</span>);<span class=\"comment\">//更新最小子数组长度</span></span><br><span class=\"line\">            sum -= nums[start++];   <span class=\"comment\">//这里是滑动窗口的妙处所在，不断变更起始位置 start</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minLength == INT_MAX ? <span class=\"number\">0</span> : minLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h3>\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O(1)​</p>\n<ul>\n<li>注意，虽然 for 循环里面还有一个 while 一共两重循环，但是时间复杂度是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被被操作两次，所以时间复杂度是 2 × n 也就是$O(n)$。大部分情况下两重循环还是$O(n^2)$，具体情况具体分析。</li>\n</ul>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>还是一样，一眼滑动窗口，但是就是不知道怎么写，看了之后就会了。</p>\n<h1 id=\"相关题目\">相关题目<a title=\"#相关题目\" href=\"#相关题目\"></a></h1>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/fruit-into-baskets/\" target=\"_blank\">904.水果成篮</a></li>\n<li><a href=\"https://leetcode.cn/problems/minimum-window-substring/\" target=\"_blank\">76.最小覆盖子串</a></li>\n</ul>\n","link":"leetcode/209-长度最小的子数组","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/209-长度最小的子数组/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"},{"id":"相关题目","title":"相关题目","index":"4"}],"reward":true,"copyright":{"published":"January 21, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/209-长度最小的子数组/\" title=\"209-长度最小的子数组\">https://hs-zhangsan.github.io/leetcode/209-长度最小的子数组/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}