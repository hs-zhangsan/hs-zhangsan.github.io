{"title":"24-两两交换链表中的结点","date":"2023-01-26T18:10:40.000Z","date_formatted":{"ll":"Jan 26, 2023","L":"01/26/2023","MM-DD":"01-26"},"updated":"2023-03-31T11:45:37.369Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/solution/by-taisui-d4pc/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p>示例 1：</p>\n<p><img src=\"C:/Files/markdown-images/202301261813096.jpeg\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,4]</span><br><span class=\"line\">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = []</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p>示例 3：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1]</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>链表中节点的数目在范围 [0, 100] 内</li>\n<li>0 &lt;= Node.val &lt;= 100</li>\n</ul>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h3 id=\"方法一：迭代\">方法一：迭代<a title=\"#方法一：迭代\" href=\"#方法一：迭代\"></a></h3>\n<ul>\n<li>首先，链表类题目无脑用哑结点。</li>\n<li>其次，以 head = [1,2,3,4] 为例，操作前链表为：<code>dummyHead -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; null</code>，交换一对节点的操作分为三步进行：\n<ol>\n<li>第一步直接越过下一个节点1，将当前节点 dummyHead 的 next 指向节点2；</li>\n<li>第二步再将节点2的 next 指向节点1；</li>\n<li>第三步将节点1的 next 指向节点3，与原链表重新连接起来。</li>\n</ol>\n</li>\n<li>以上三步便可将一对节点交换，操作后链表变为：<code>dummyHead -&gt; 2 -&gt; 1 -&gt; 3 -&gt; 4 -&gt; null</code>，之后遍历链表重复进行交换每对数组即可（自己找张纸画一画链表类的问题很简单的）。</li>\n</ul>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代版本</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">swapPairs</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置哑结点，便于后续操作</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">dummyHead</span> =</span> <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    dummyHead-&gt;next = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">curr</span> =</span> dummyHead;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//记录临时节点</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">temp1</span> =</span> curr-&gt;next;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">temp2</span> =</span> curr-&gt;next-&gt;next-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        curr-&gt;next = curr-&gt;next-&gt;next;  <span class=\"comment\">//第一步</span></span><br><span class=\"line\">        curr-&gt;next-&gt;next = temp1;       <span class=\"comment\">//第二步</span></span><br><span class=\"line\">        curr-&gt;next-&gt;next-&gt;next = temp2; <span class=\"comment\">//第三步</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注意这里，curr 只移动两位，</span></span><br><span class=\"line\">        <span class=\"comment\">//也就是说，移动到下一对要交换的节点之前</span></span><br><span class=\"line\">        <span class=\"comment\">//以上述举例为例，curr 只移动到节点2而不是节点3</span></span><br><span class=\"line\">        curr = curr-&gt;next-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyHead-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h3>\n<p>时间复杂度：O(n)​</p>\n<p>空间复杂度：O(1)​</p>\n<h3 id=\"方法二：递归\">方法二：递归<a title=\"#方法二：递归\" href=\"#方法二：递归\"></a></h3>\n<ul>\n<li>而聪明的同学都知道，递归和循环大多是可以相互替代的，那么这道题呢，也是可以用递归完成的。（PS：一般情况下，建议使用循环而不是递归）</li>\n</ul>\n<h3 id=\"代码-1\">代码<a title=\"#代码-1\" href=\"#代码-1\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归版本</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">swapPairs</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//递归结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head || !head-&gt;next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">newHead</span> =</span> head-&gt;next;  <span class=\"comment\">//保存下一个节点</span></span><br><span class=\"line\">    head-&gt;next = swapPairs(newHead-&gt;next);  <span class=\"comment\">//进入递归</span></span><br><span class=\"line\">    newHead-&gt;next = head;                   <span class=\"comment\">//交换节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析-1\">复杂度分析<a title=\"#复杂度分析-1\" href=\"#复杂度分析-1\"></a></h3>\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O(1)</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>逻辑自己画了画很容易想明白，当然还不够明白，不清晰不透彻，所以没写出来，然后看了一眼题解，豁然开朗，真他妈简单，然后秒了，然后又看了看我之前写的题解，写的是真他妈的好啊，再然后发现之前还用了递归写了，我竟然都没想到（虽然说一般也不会用递归呵呵呵），也懒得再用递归写一遍了，然后只看了看之前的代码，一眼看过去没看懂，然后也懒得看了。。。</p>\n<p>总结：我好像是重新开始一样。。。</p>\n","link":"leetcode/24-两两交换链表中的节点","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/24-两两交换链表中的节点/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"}],"reward":true,"copyright":{"published":"January 26, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/24-两两交换链表中的节点/\" title=\"24-两两交换链表中的结点\">https://hs-zhangsan.github.io/leetcode/24-两两交换链表中的节点/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}