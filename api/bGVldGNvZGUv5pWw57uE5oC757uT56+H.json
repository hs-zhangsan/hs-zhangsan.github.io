{"title":"数组总结篇","date":"2023-01-22T11:36:07.000Z","date_formatted":{"ll":"Jan 22, 2023","L":"01/22/2023","MM-DD":"01-22"},"updated":"2023-04-10T16:01:52.490Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a></p>\n<p>还是直接搬运卡子哥的总结，原文链接 <a href=\"https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html\" target=\"_blank\">https://programmercarl.com/数组总结篇.html</a></p>\n<hr>\n<h1 id=\"数组理论基础\">数组理论基础<a title=\"#数组理论基础\" href=\"#数组理论基础\"></a></h1>\n<p>数组是非常基础的数据结构，在面试中，考察数组的题目一般在思维上都不难，主要是考察对代码的掌控能力</p>\n<p>也就是说，想法很简单，但实现起来 可能就不是那么回事了。</p>\n<p>首先要知道数组在内存中的存储方式，这样才能真正理解数组相关的面试题</p>\n<p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong></p>\n<p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p>\n<p>举一个字符数组的例子，如图所示：</p>\n<p><img src=\"C:/Files/markdown-images/202301221138658.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>需要两点注意的是</p>\n<ul>\n<li><strong>数组下标都是从0开始的。</strong></li>\n<li><strong>数组内存空间的地址是连续的</strong></li>\n</ul>\n<p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p>\n<p>例如删除下标为3的元素，需要对下标为3的元素后面的所有元素都要做移动操作，如图所示：</p>\n<p><img src=\"C:/Files/markdown-images/202301221138779.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>而且大家如果使用C++的话，要注意vector 和 array的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。</p>\n<p><strong>数组的元素是不能删的，只能覆盖。</strong></p>\n<p>那么二维数组直接上图，大家应该就知道怎么回事了</p>\n<p><img src=\"C:/Files/markdown-images/202301221138683.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>那么二维数组在内存的空间地址是连续的么？</strong></p>\n<p>我们来举一个Java的例子，例如： <code>int[][] rating = new int[3][4];</code> ， 这个二维数组在内存空间可不是一个 <code>3*4</code> 的连续地址空间</p>\n<p>看了下图，就应该明白了：</p>\n<p><img src=\"C:/Files/markdown-images/202301221138614.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>所以<strong>Java的二维数组在内存中不是 <code>3\\*4</code> 的连续地址空间，而是四条连续的地址空间组成！</strong></p>\n<h1 id=\"数组的经典题目\">数组的经典题目<a title=\"#数组的经典题目\" href=\"#数组的经典题目\"></a></h1>\n<p>在面试中，数组是必考的基础数据结构。</p>\n<p>其实数组的题目在思想上一般比较简单的，但是如果想高效，并不容易。</p>\n<p>我们之前一共讲解了四道经典数组题目，每一道题目都代表一个类型，一种思想。</p>\n<h2 id=\"二分法\">二分法<a title=\"#二分法\" href=\"#二分法\"></a></h2>\n<p><a href=\"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\" target=\"_blank\">数组：每次遇到二分法，都是一看就会，一写就废</a></p>\n<p>这道题目呢，考察数组的基本操作，思路很简单，但是通过率在简单题里并不高，不要轻敌。</p>\n<p>可以使用暴力解法，通过这道题目，如果追求更优的算法，建议试一试用二分法，来解决这道题目</p>\n<ul>\n<li>暴力解法时间复杂度：O(n)</li>\n<li>二分法时间复杂度：O(logn)</li>\n</ul>\n<p>在这道题目中我们讲到了<strong>循环不变量原则</strong>，只有在循环中坚持对区间的定义，才能清楚的把握循环中的各种细节。</p>\n<p><strong>二分法是算法面试中的常考题，建议通过这道题目，锻炼自己手撕二分的能力</strong>。</p>\n<h2 id=\"双指针法\">双指针法<a title=\"#双指针法\" href=\"#双指针法\"></a></h2>\n<ul>\n<li><a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\" target=\"_blank\">数组：就移除个元素很难么？</a></li>\n</ul>\n<p>双指针法（快慢指针法）：<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p>\n<ul>\n<li>暴力解法时间复杂度：O(n^2)</li>\n<li>双指针时间复杂度：O(n)</li>\n</ul>\n<p>这道题目迷惑了不少同学，纠结于数组中的元素为什么不能删除，主要是因为以下两点：</p>\n<ul>\n<li>数组在内存中是连续的地址空间，不能释放单一元素，如果要释放，就是全释放（程序运行结束，回收内存栈空间）。</li>\n<li>C++中vector和array的区别一定要弄清楚，vector的底层实现是array，封装后使用更友好。</li>\n</ul>\n<p>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法。</p>\n<h2 id=\"滑动窗口\">滑动窗口<a title=\"#滑动窗口\" href=\"#滑动窗口\"></a></h2>\n<ul>\n<li><a href=\"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\" target=\"_blank\">数组：滑动窗口拯救了你</a></li>\n</ul>\n<p>本题介绍了数组操作中的另一个重要思想：滑动窗口。</p>\n<ul>\n<li>暴力解法时间复杂度：O(n^2)</li>\n<li>滑动窗口时间复杂度：O(n)</li>\n</ul>\n<p>本题中，主要要理解滑动窗口如何移动 窗口起始位置，达到动态更新窗口大小的，从而得出长度最小的符合条件的长度。</p>\n<p><strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)的暴力解法降为O(n)。</strong></p>\n<p>如果没有接触过这一类的方法，很难想到类似的解题思路，滑动窗口方法还是很巧妙的。</p>\n<h2 id=\"模拟行为\">模拟行为<a title=\"#模拟行为\" href=\"#模拟行为\"></a></h2>\n<ul>\n<li><a href=\"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html\" target=\"_blank\">数组：这个循环可以转懵很多人！</a></li>\n</ul>\n<p>模拟类的题目在数组中很常见，不涉及到什么算法，就是单纯的模拟，十分考察大家对代码的掌控能力。</p>\n<p>在这道题目中，我们再一次介绍到了<strong>循环不变量原则</strong>，其实这也是写程序中的重要原则。</p>\n<p>相信大家有遇到过这种情况： 感觉题目的边界调节超多，一波接着一波的判断，找边界，拆了东墙补西墙，好不容易运行通过了，代码写的十分冗余，毫无章法，其实<strong>真正解决题目的代码都是简洁的，或者有原则性的</strong>，大家可以在这道题目中体会到这一点。</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p><img src=\"C:/Files/markdown-images/202301221138872.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这个图是 <a href=\"https://programmercarl.com/other/kstar.html\" target=\"_blank\">代码随想录知识星球</a>成员：<a href=\"https://wx.zsxq.com/dweb2/index/footprint/844412858822412\" target=\"_blank\">海螺人</a>，所画，总结的非常好，分享给大家。</p>\n<p>从二分法到双指针，从滑动窗口到螺旋矩阵，相信如果大家真的认真做了「代码随想录」每日推荐的题目，定会有所收获。</p>\n<p>推荐的题目即使大家之前做过了，再读一遍文章，也会帮助你提炼出解题的精髓所在。</p>\n","link":"leetcode/数组总结篇","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/数组总结篇/","toc":[{"id":"数组理论基础","title":"数组理论基础","index":"1"},{"id":"数组的经典题目","title":"数组的经典题目","index":"2","children":[{"id":"二分法","title":"二分法","index":"2.1"},{"id":"双指针法","title":"双指针法","index":"2.2"},{"id":"滑动窗口","title":"滑动窗口","index":"2.3"},{"id":"模拟行为","title":"模拟行为","index":"2.4"}]},{"id":"总结","title":"总结","index":"3"}],"reward":true,"copyright":{"published":"January 22, 2023","updated":"April 10, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/数组总结篇/\" title=\"数组总结篇\">https://hs-zhangsan.github.io/leetcode/数组总结篇/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}