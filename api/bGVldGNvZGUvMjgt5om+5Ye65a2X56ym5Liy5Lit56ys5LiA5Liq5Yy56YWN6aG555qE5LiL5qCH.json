{"title":"28-找出字符串中第一个匹配项的下标","date":"2023-02-07T14:22:24.000Z","date_formatted":{"ll":"Feb 7, 2023","L":"02/07/2023","MM-DD":"02-07"},"updated":"2023-03-31T11:45:37.371Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/\" target=\"_blank\">力扣链接</a> | 力扣题解链接</p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class=\"line\">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class=\"line\">输出：-1</span><br><span class=\"line\">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= haystack.length, needle.length &lt;= 104</li>\n<li>haystack 和 needle 仅由小写英文字符组成</li>\n</ul>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<h2 id=\"思路\">思路<a title=\"#思路\" href=\"#思路\"></a></h2>\n<p>KMP的经典思想就是：<strong>当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</strong></p>\n<p>本篇将以如下顺序来讲解KMP，</p>\n<ul>\n<li>什么是KMP</li>\n<li>KMP有什么用</li>\n<li>什么是前缀表</li>\n<li>为什么一定要用前缀表</li>\n<li>如何计算前缀表</li>\n<li>前缀表与next数组</li>\n<li>使用next数组来匹配</li>\n<li>时间复杂度分析</li>\n<li>构造next数组</li>\n<li>使用next数组来做匹配</li>\n<li>前缀表统一减一 C++代码实现</li>\n<li>前缀表（不减一）C++实现</li>\n<li>总结</li>\n</ul>\n<p>读完本篇可以顺便把leetcode上28.实现strStr()（现在这道题名字改为了 「28.找出字符串中第一个匹配项的下标」）题目做了。</p>\n<h2 id=\"什么是kmp\">什么是KMP<a title=\"#什么是kmp\" href=\"#什么是kmp\"></a></h2>\n<p>说到KMP，先说一下KMP这个名字是怎么来的，为什么叫做KMP呢。</p>\n<p>因为是由这三位学者发明的：Knuth，Morris和Pratt，所以取了三位学者名字的首字母。所以叫做KMP</p>\n<h2 id=\"kmp有什么用\">KMP有什么用<a title=\"#kmp有什么用\" href=\"#kmp有什么用\"></a></h2>\n<p>KMP主要应用在字符串匹配上。</p>\n<p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p>\n<p>所以如何记录已经匹配的文本内容，是KMP的重点，也是next数组肩负的重任。</p>\n<p>其实KMP的代码不好理解，一些同学甚至直接把KMP代码的模板背下来。</p>\n<p>没有彻底搞懂，懵懵懂懂就把代码背下来太容易忘了。</p>\n<p>不仅面试的时候可能写不出来，如果面试官问：<strong>next数组里的数字表示的是什么，为什么这么表示？</strong></p>\n<p>估计大多数候选人都是懵逼的。</p>\n<p>下面Carl就带大家把KMP的精髓，next数组弄清楚。</p>\n<h2 id=\"什么是前缀表\">什么是前缀表<a title=\"#什么是前缀表\" href=\"#什么是前缀表\"></a></h2>\n<p>写过KMP的同学，一定都写过next数组，那么这个next数组究竟是个啥呢？</p>\n<p>next数组就是一个前缀表（prefix table）。</p>\n<p>前缀表有什么作用呢？</p>\n<p><strong>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。</strong></p>\n<p>为了清楚地了解前缀表的来历，我们来举一个例子：</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>请记住文本串和模式串的作用，对于理解下文很重要，要不然容易看懵。所以说三遍：</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>如动画所示：</p>\n<p><img src=\"C:/Files/markdown-images/202302071426363.gif\" alt=\"KMP详解1\" loading=\"lazy\" class=\"φbp\"></p>\n<p>动画里，我特意把 子串<code>aa</code> 标记上了，这是有原因的，大家先注意一下，后面还会说到。</p>\n<p>可以看出，文本串中第六个字符b 和 模式串的第六个字符f，不匹配了。如果暴力匹配，发现不匹配，此时就要从头匹配了。</p>\n<p>但如果使用前缀表，就不会从头匹配，而是从上次已经匹配的内容开始匹配，找到了模式串中第三个字符b继续开始匹配。</p>\n<p>此时就要问了<strong>前缀表是如何记录的呢？</strong></p>\n<p>首先要知道前缀表的任务是当前位置匹配失败，找到之前已经匹配上的位置，再重新匹配，此也意味着在某个字符失配时，前缀表会告诉你下一步匹配中，模式串应该跳到哪个位置。</p>\n<p>那么什么是前缀表：<strong>记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</strong></p>\n<h2 id=\"最长公共前后缀？\">最长公共前后缀？<a title=\"#最长公共前后缀？\" href=\"#最长公共前后缀？\"></a></h2>\n<p>文章中字符串的<strong>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串</strong>。</p>\n<p><strong>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</strong>。</p>\n<p><strong>正确理解什么是前缀什么是后缀很重要</strong>!</p>\n<p>那么网上清一色都说 “kmp 最长公共前后缀” 又是什么回事呢？</p>\n<p>我查了一遍 算法导论 和 算法4里KMP的章节，都没有提到 “最长公共前后缀”这个词，也不知道从哪里来了，我理解是用“最长相等前后缀” 更准确一些。</p>\n<p><strong>因为前缀表要求的就是相同前后缀的长度。</strong></p>\n<p>而最长公共前后缀里面的“公共”，更像是说前缀和后缀公共的长度。这其实并不是前缀表所需要的。</p>\n<p>所以字符串a的最长相等前后缀为0。 字符串aa的最长相等前后缀为1。 字符串aaa的最长相等前后缀为2。 等等…。</p>\n<h2 id=\"为什么一定要用前缀表\">为什么一定要用前缀表<a title=\"#为什么一定要用前缀表\" href=\"#为什么一定要用前缀表\"></a></h2>\n<p>这就是前缀表，那为啥就能告诉我们 上次匹配的位置，并跳过去呢？</p>\n<p>回顾一下，刚刚匹配的过程在下标5的地方遇到不匹配，模式串是指向f，如图： <img src=\"C:/Files/markdown-images/202302071426123.png\" alt=\"KMP精讲1\" loading=\"lazy\"></p>\n<p>然后就找到了下标2，指向b，继续匹配：如图： <img src=\"C:/Files/markdown-images/202302071426142.png\" alt=\"KMP精讲2\" loading=\"lazy\"></p>\n<p>以下这句话，对于理解为什么使用前缀表可以告诉我们匹配失败之后跳到哪里重新匹配 非常重要！</p>\n<p><strong>下标5之前这部分的字符串（也就是字符串aabaa）的最长相等的前缀 和 后缀字符串是 子字符串aa ，因为找到了最长相等的前缀和后缀，匹配失败的位置是后缀子串的后面，那么我们找到与其相同的前缀的后面重新匹配就可以了。</strong></p>\n<p>所以前缀表具有告诉我们当前位置匹配失败，跳到之前已经匹配过的地方的能力。</p>\n<p><strong>很多介绍KMP的文章或者视频并没有把为什么要用前缀表？这个问题说清楚，而是直接默认使用前缀表。</strong></p>\n<h2 id=\"如何计算前缀表\">如何计算前缀表<a title=\"#如何计算前缀表\" href=\"#如何计算前缀表\"></a></h2>\n<p>接下来就要说一说怎么计算前缀表。</p>\n<p>如图：</p>\n<p><img src=\"C:/Files/markdown-images/202302071426132.png\" alt=\"KMP精讲5\" loading=\"lazy\" class=\"φbp\"></p>\n<p>长度为前1个字符的子串<code>a</code>，最长相同前后缀的长度为0。（注意字符串的<strong>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串</strong>；<strong>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</strong>。）</p>\n<p><img src=\"C:/Files/markdown-images/202302071430031.png\" alt=\"KMP精讲6\" loading=\"lazy\" class=\"φbp\"></p>\n<p>长度为前2个字符的子串<code>aa</code>，最长相同前后缀的长度为1。</p>\n<p><img src=\"C:/Files/markdown-images/202302071426101.png\" alt=\"KMP精讲7\" loading=\"lazy\" class=\"φbp\"></p>\n<p>长度为前3个字符的子串<code>aab</code>，最长相同前后缀的长度为0。</p>\n<p>以此类推： 长度为前4个字符的子串<code>aaba</code>，最长相同前后缀的长度为1。 长度为前5个字符的子串<code>aabaa</code>，最长相同前后缀的长度为2。 长度为前6个字符的子串<code>aabaaf</code>，最长相同前后缀的长度为0。</p>\n<p>那么把求得的最长相同前后缀的长度就是对应前缀表的元素，如图： <img src=\"C:/Files/markdown-images/202302071426150.png\" alt=\"KMP精讲8\" loading=\"lazy\"></p>\n<p>可以看出模式串与前缀表对应位置的数字表示的就是：<strong>下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</strong></p>\n<p>再来看一下如何利用 前缀表找到 当字符不匹配的时候应该指针应该移动的位置。如动画所示：</p>\n<p><img src=\"C:/Files/markdown-images/202302071426584.gif\" alt=\"KMP精讲2\" loading=\"lazy\" class=\"φbp\"></p>\n<p>找到的不匹配的位置， 那么此时我们要看它的前一个字符的前缀表的数值是多少。</p>\n<p>为什么要前一个字符的前缀表的数值呢，因为要找前面字符串的最长相同的前缀和后缀。</p>\n<p>所以要看前一位的 前缀表的数值。</p>\n<p>前一个字符的前缀表的数值是2， 所以把下标移动到下标2的位置继续比配。 可以再反复看一下上面的动画。</p>\n<p>最后就在文本串中找到了和模式串匹配的子串了。</p>\n<h2 id=\"前缀表与next数组\">前缀表与next数组<a title=\"#前缀表与next数组\" href=\"#前缀表与next数组\"></a></h2>\n<p>很多KMP算法的时间都是使用next数组来做回退操作，那么next数组与前缀表有什么关系呢？</p>\n<p>next数组就可以是前缀表，但是很多实现都是把前缀表统一减一（右移一位，初始位置为-1）之后作为next数组。</p>\n<p>为什么这么做呢，其实也是很多文章视频没有解释清楚的地方。</p>\n<p>其实<strong>这并不涉及到KMP的原理，而是具体实现，next数组既可以就是前缀表，也可以是前缀表统一减一（右移一位，初始位置为-1）。</strong></p>\n<p>后面我会提供两种不同的实现代码，大家就明白了。</p>\n<h2 id=\"使用next数组来匹配\">使用next数组来匹配<a title=\"#使用next数组来匹配\" href=\"#使用next数组来匹配\"></a></h2>\n<p><strong>以下我们以前缀表统一减一之后的next数组来做演示</strong>。</p>\n<p>有了next数组，就可以根据next数组来 匹配文本串s，和模式串t了。</p>\n<p>注意next数组是新前缀表（旧前缀表统一减一了）。</p>\n<p>匹配过程动画如下：</p>\n<p><img src=\"C:/Files/markdown-images/202302071426495.gif\" alt=\"KMP精讲4\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"时间复杂度分析\">时间复杂度分析<a title=\"#时间复杂度分析\" href=\"#时间复杂度分析\"></a></h2>\n<p>其中n为文本串长度，m为模式串长度，因为在匹配的过程中，根据前缀表不断调整匹配的位置，可以看出匹配的过程是O(n)，之前还要单独生成next数组，时间复杂度是O(m)。所以整个KMP算法的时间复杂度是O(n+m)的。</p>\n<p>暴力的解法显而易见是O(n × m)，所以<strong>KMP在字符串匹配中极大地提高了搜索的效率。</strong></p>\n<p>为了和力扣题目28.实现strStr保持一致，方便大家理解，以下文章统称haystack为文本串, needle为模式串。</p>\n<p>都知道使用KMP算法，一定要构造next数组。</p>\n<h2 id=\"构造next数组\">构造next数组<a title=\"#构造next数组\" href=\"#构造next数组\"></a></h2>\n<p>我们定义一个函数getNext来构建next数组，函数参数为指向next数组的指针，和一个字符串。 代码如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void getNext(int* next, const string&amp; s)</span><br></pre></td></tr></table></figure>\n<p><strong>构造next数组其实就是计算模式串s，前缀表的过程。</strong> 主要有如下三步：</p>\n<ol>\n<li>初始化</li>\n<li>处理前后缀不相同的情况</li>\n<li>处理前后缀相同的情况</li>\n</ol>\n<p>接下来我们详解一下。</p>\n<ol>\n<li>初始化：</li>\n</ol>\n<p>定义两个指针i和j，j指向前缀末尾位置，i指向后缀末尾位置。</p>\n<p>然后还要对next数组进行初始化赋值，如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">next[<span class=\"number\">0</span>] = j;</span><br></pre></td></tr></table></figure>\n<p>j 为什么要初始化为 -1呢，因为之前说过 前缀表要统一减一的操作仅仅是其中的一种实现，我们这里选择j初始化为-1，下文我还会给出j不初始化为-1的实现代码。</p>\n<p>next[i] 表示 i（包括i）之前最长相等的前后缀长度（其实就是j）</p>\n<p>所以初始化next[0] = j 。</p>\n<ol>\n<li>处理前后缀不相同的情况</li>\n</ol>\n<p>因为j初始化为-1，那么i就从1开始，进行s[i] 与 s[j+1]的比较。</p>\n<p>所以遍历模式串s的循环下标i 要从 1开始，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br></pre></td></tr></table></figure>\n<p>如果 s[i] 与 s[j+1]不相同，也就是遇到 前后缀末尾不相同的情况，就要向前回退。</p>\n<p>怎么回退呢？</p>\n<p>next[j]就是记录着j（包括j）之前的子串的相同前后缀的长度。</p>\n<p>那么 s[i] 与 s[j+1] 不相同，就要找 j+1前一个元素在next数组里的值（就是next[j]）。</p>\n<p>所以，处理前后缀不相同的情况代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 前后缀不相同了</span></span><br><span class=\"line\">    j = next[j]; <span class=\"comment\">// 向前回退</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>处理前后缀相同的情况</li>\n</ol>\n<p>如果 s[i] 与 s[j + 1] 相同，那么就同时向后移动i 和j 说明找到了相同的前后缀，同时还要将j（前缀的长度）赋给next[i], 因为next[i]要记录相同前后缀的长度。</p>\n<p>代码如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (s[i] == s[j + 1]) &#123; // 找到相同的前后缀</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next[i] = j;</span><br></pre></td></tr></table></figure>\n<p>最后整体构建next数组的函数代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i从1开始</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 前后缀不相同了</span></span><br><span class=\"line\">            j = next[j]; <span class=\"comment\">// 向前回退</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 找到相同的前后缀</span></span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next[i] = j; <span class=\"comment\">// 将j（前缀的长度）赋给next[i]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码构造next数组的逻辑流程动画如下：</p>\n<p><img src=\"C:/Files/markdown-images/202302071426360.gif\" alt=\"KMP精讲3\" loading=\"lazy\" class=\"φbp\"></p>\n<p>得到了next数组之后，就要用这个来做匹配了。</p>\n<h2 id=\"使用next数组来做匹配\">使用next数组来做匹配<a title=\"#使用next数组来做匹配\" href=\"#使用next数组来做匹配\"></a></h2>\n<p>在文本串s里 找是否出现过模式串t。</p>\n<p>定义两个下标j 指向模式串起始位置，i指向文本串起始位置。</p>\n<p>那么j初始值依然为-1，为什么呢？ <strong>依然因为next数组里记录的起始位置为-1。</strong></p>\n<p>i就从0开始，遍历文本串，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) </span><br></pre></td></tr></table></figure>\n<p>接下来就是 s[i] 与 t[j + 1] （因为j从-1开始的） 进行比较。</p>\n<p>如果 s[i] 与 t[j + 1] 不相同，j就要从next数组里寻找下一个匹配的位置。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != t[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    j = next[j];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果 s[i] 与 t[j + 1] 相同，那么i 和 j 同时向后移动， 代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (s[i] == t[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    j++; <span class=\"comment\">// i的增加在for循环里</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何判断在文本串s里出现了模式串t呢，如果j指向了模式串t的末尾，那么就说明模式串t完全匹配文本串s里的某个子串了。</p>\n<p>本题要在文本串字符串中找出模式串出现的第一个位置 (从0开始)，所以返回当前在文本串匹配模式串的位置i 减去 模式串的长度，就是文本串字符串中出现模式串的第一个位置。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (j == (t.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (i - t.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么使用next数组，用模式串匹配文本串的整体代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> j = <span class=\"number\">-1</span>; <span class=\"comment\">// 因为next数组里记录的起始位置为-1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i就从0开始</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != t[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 不匹配</span></span><br><span class=\"line\">        j = next[j]; <span class=\"comment\">// j 寻找之前匹配的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == t[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 匹配，j和i同时向后移动</span></span><br><span class=\"line\">        j++; <span class=\"comment\">// i的增加在for循环里</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == (t.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) ) &#123; <span class=\"comment\">// 文本串s里出现了模式串t</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (i - t.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时所有逻辑的代码都已经写出来了，力扣 28.实现strStr 题目的整体代码如下：</p>\n<h2 id=\"前缀表统一减一-c++代码实现\">前缀表统一减一 C++代码实现<a title=\"#前缀表统一减一-c++代码实现\" href=\"#前缀表统一减一-c++代码实现\"></a></h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i从1开始</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 前后缀不相同了</span></span><br><span class=\"line\">                j = next[j]; <span class=\"comment\">// 向前回退</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 找到相同的前后缀</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j; <span class=\"comment\">// 将j（前缀的长度）赋给next[i]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string haystack, string needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needle.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> next[needle.<span class=\"built_in\">size</span>()];</span><br><span class=\"line\">        <span class=\"built_in\">getNext</span>(next, needle);</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>; <span class=\"comment\">// // 因为next数组里记录的起始位置为-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; haystack.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i就从0开始</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; haystack[i] != needle[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 不匹配</span></span><br><span class=\"line\">                j = next[j]; <span class=\"comment\">// j 寻找之前匹配的位置</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haystack[i] == needle[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 匹配，j和i同时向后移动</span></span><br><span class=\"line\">                j++; <span class=\"comment\">// i的增加在for循环里</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == (needle.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) ) &#123; <span class=\"comment\">// 文本串s里出现了模式串t</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i - needle.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"前缀表（不减一）c++实现\">前缀表（不减一）C++实现<a title=\"#前缀表（不减一）c++实现\" href=\"#前缀表（不减一）c++实现\"></a></h2>\n<p>那么前缀表就不减一了，也不右移的，到底行不行呢？</p>\n<p><strong>行！</strong></p>\n<p>我之前说过，这仅仅是KMP算法实现上的问题，如果就直接使用前缀表可以换一种回退方式，找j=next[j-1] 来进行回退。</p>\n<p>主要就是j=next[x]这一步最为关键！</p>\n<p>我给出的getNext的实现为：（前缀表统一减一）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i从1开始</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 前后缀不相同了</span></span><br><span class=\"line\">            j = next[j]; <span class=\"comment\">// 向前回退</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 找到相同的前后缀</span></span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next[i] = j; <span class=\"comment\">// 将j（前缀的长度）赋给next[i]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时如果输入的模式串为aabaaf，对应的next为-1 0 -1 0 1 -1。</p>\n<p>这里j和next[0]初始化为-1，整个next数组是以 前缀表减一之后的效果来构建的。</p>\n<p>那么前缀表不减一来构建next数组，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; s[i] != s[j]) &#123; <span class=\"comment\">// j要保证大于0，因为下面有取j-1作为数组下标的操作</span></span><br><span class=\"line\">            j = next[j - <span class=\"number\">1</span>]; <span class=\"comment\">// 注意这里，是要找前一位的对应的回退位置了</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == s[j]) &#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next[i] = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时如果输入的模式串为aabaaf，对应的next为 0 1 0 1 2 0，（其实这就是前缀表的数值了）。</p>\n<p>那么用这样的next数组也可以用来做匹配，代码要有所改动。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class=\"line\">                j = next[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == s[j]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string haystack, string needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needle.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> next[needle.<span class=\"built_in\">size</span>()];</span><br><span class=\"line\">        <span class=\"built_in\">getNext</span>(next, needle);</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; haystack.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class=\"line\">                j = next[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == needle.<span class=\"built_in\">size</span>() ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i - needle.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结-1\">总结<a title=\"#总结-1\" href=\"#总结-1\"></a></h2>\n<p>我们介绍了什么是KMP，KMP可以解决什么问题，然后分析KMP算法里的next数组，知道了next数组就是前缀表，再分析为什么要是前缀表而不是什么其他表。</p>\n<p>接着从给出的模式串中，我们一步一步的推导出了前缀表，得出前缀表无论是统一减一还是不减一得到的next数组仅仅是kmp的实现方式的不同。</p>\n<p>其中还分析了KMP算法的时间复杂度，并且和暴力方法做了对比。</p>\n<p>然后先用前缀表统一减一得到的next数组，求得文本串s里是否出现过模式串t，并给出了具体分析代码。</p>\n<p>又给出了直接用前缀表作为next数组，来做匹配的实现代码。</p>\n<p>可以说把KMP的每一个细微的细节都扣了出来，毫无遮掩的展示给大家了！</p>\n<h1 id=\"相关题目\">相关题目<a title=\"#相关题目\" href=\"#相关题目\"></a></h1>\n","link":"leetcode/28-找出字符串中第一个匹配项的下标","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/28-找出字符串中第一个匹配项的下标/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3","children":[{"id":"思路","title":"思路","index":"3.1"},{"id":"什么是kmp","title":"什么是KMP","index":"3.2"},{"id":"kmp有什么用","title":"KMP有什么用","index":"3.3"},{"id":"什么是前缀表","title":"什么是前缀表","index":"3.4"},{"id":"最长公共前后缀？","title":"最长公共前后缀？","index":"3.5"},{"id":"为什么一定要用前缀表","title":"为什么一定要用前缀表","index":"3.6"},{"id":"如何计算前缀表","title":"如何计算前缀表","index":"3.7"},{"id":"前缀表与next数组","title":"前缀表与next数组","index":"3.8"},{"id":"使用next数组来匹配","title":"使用next数组来匹配","index":"3.9"},{"id":"时间复杂度分析","title":"时间复杂度分析","index":"3.10"},{"id":"构造next数组","title":"构造next数组","index":"3.11"},{"id":"使用next数组来做匹配","title":"使用next数组来做匹配","index":"3.12"},{"id":"前缀表统一减一-c++代码实现","title":"前缀表统一减一 C++代码实现","index":"3.13"},{"id":"前缀表（不减一）c++实现","title":"前缀表（不减一）C++实现","index":"3.14"},{"id":"总结-1","title":"总结","index":"3.15"}]},{"id":"相关题目","title":"相关题目","index":"4"}],"reward":true,"copyright":{"published":"February 7, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/28-找出字符串中第一个匹配项的下标/\" title=\"28-找出字符串中第一个匹配项的下标\">https://hs-zhangsan.github.io/leetcode/28-找出字符串中第一个匹配项的下标/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}