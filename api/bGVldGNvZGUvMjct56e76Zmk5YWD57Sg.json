{"title":"27-移除元素","date":"2023-01-19T17:52:18.000Z","date_formatted":{"ll":"Jan 19, 2023","L":"01/19/2023","MM-DD":"01-19"},"updated":"2023-03-31T11:45:37.370Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/remove-element\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/remove-element/solution/27-by-taisui-heg8/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p>\n<p><strong>你不需要考虑数组中超出新长度后面的元素。</strong></p>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<p>这道题是双指针的经典题目，暴力解法就不再赘述，直接讲双指针的解法。</p>\n<blockquote>\n<p>这是旧版题解</p>\n</blockquote>\n<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<ul>\n<li>首先我们要明确， <strong>数组中的元素不能单独删除，只能覆盖。</strong> （你问为什么？这都不知道你为什么会出现在这里？好吧，原因是 <strong>数组的元素在内存地址中是连续的</strong> ）</li>\n<li>回到这道题，移除元素的操作只需要 <strong>将其后面的元素依次覆盖前面的</strong> 就好。我们很容易想到暴力解法，也就是用两个 for 循环，一个循环遍历数组元素，一个循环更新数组元素。虽然这道题暴力解法也可以过，但是若只是这样我们就不会出现在这里了。(/▽＼)<br>\n（这里我没放暴力的代码，大家可以自己敲出来再进行优化，初学者的话建议不要怕麻烦，没有思路就先写出暴力的解法再考虑能不能优化）</li>\n<li>我们可以使用双指针法，通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。具体地，遍历数组，快指针和慢指针每次 +1，当位于快指针位置的元素等于要删除的元素时，慢指针停一次，快指针继续递增，每层循环都将快指针位置的元素覆盖至慢指针位置的元素。</li>\n<li>注意以上实现方法并没有改变元素的相对位置。（所以题目的倒数第二句话并没有什么*用）</li>\n</ul>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fast = <span class=\"number\">0</span>, slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &lt; numsSize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[fast] != val) &#123;</span><br><span class=\"line\">            nums[slow++] = nums[fast];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fast++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h3>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n<hr>\n<blockquote>\n<p>这是新版题解</p>\n</blockquote>\n<h3 id=\"解题思路-1\">解题思路<a title=\"#解题思路-1\" href=\"#解题思路-1\"></a></h3>\n<ul>\n<li>使用快慢指针，<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></li>\n<li>具体地，让两个指针 fast 和 slow 初始都为 0，然后同时向后移动，当遇到 val 时，slow 停下而 fast 继续移动，并在过程中将 nums[fast] 的值赋给 nums[slow] 即可。</li>\n<li><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。</strong></li>\n</ul>\n<h3 id=\"代码-1\">代码<a title=\"#代码-1\" href=\"#代码-1\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize, <span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fast = <span class=\"number\">0</span>, slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &lt; numsSize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[fast] != val) &#123;</span><br><span class=\"line\">            nums[slow++] = nums[fast];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fast++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析-1\">复杂度分析<a title=\"#复杂度分析-1\" href=\"#复杂度分析-1\"></a></h3>\n<p>时间复杂度：O(n)​</p>\n<p>空间复杂度：O(1)​</p>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>一开始没想到双指针，后面想到了又没写出来。</p>\n<p>总结：长时间不写算法题是这样的，慢慢捡起来就好。</p>\n<h1 id=\"相关题目\">相关题目<a title=\"#相关题目\" href=\"#相关题目\"></a></h1>\n<ul>\n<li>26.删除排序数组中的重复项</li>\n<li>283.移动零</li>\n<li>844.比较含退格的字符串</li>\n<li>977.有序数组的平方</li>\n</ul>\n","link":"leetcode/27-移除元素","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/27-移除元素/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"},{"id":"相关题目","title":"相关题目","index":"4"}],"reward":true,"copyright":{"published":"January 19, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/27-移除元素/\" title=\"27-移除元素\">https://hs-zhangsan.github.io/leetcode/27-移除元素/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}