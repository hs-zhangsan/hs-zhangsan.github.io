{"title":"哈希表理论基础","date":"2023-01-30T09:54:11.000Z","date_formatted":{"ll":"Jan 30, 2023","L":"01/30/2023","MM-DD":"01-30"},"updated":"2023-03-31T11:45:37.376Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a></p>\n<p>哈希表这块是我一直搞不太懂的地方，理论很简单也能理解，但是实际操作起来只想哭，后面才意识到这是因为我用的 C 的原因，需要自己手搓哈希表，而其它语言都有哈希表可以直接用。</p>\n<p>说到这个，之前被朋友说过一句话，「用 C 刷题的都是大佬」，我才知道是因为用 C 刷题本身就很难，讲道理，这给了我不少自信，我觉得自己又行了。这次一鼓作气搞定 <strong>C 语言的</strong>哈希表，不就是每次使用前先造轮子么，大不了直接背过每次在抄一遍。</p>\n<p>下面是卡子哥的哈希表理论基础，原文链接：<a href=\"https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html\" target=\"_blank\">https://programmercarl.com/哈希表理论基础.html</a></p>\n<hr>\n<h2 id=\"哈希表\">哈希表<a title=\"#哈希表\" href=\"#哈希表\"></a></h2>\n<p>首先什么是 哈希表，哈希表（英文名字为Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指hash table就可以了）。</p>\n<blockquote>\n<p>哈希表是根据关键码的值而直接进行访问的数据结构。</p>\n</blockquote>\n<p>这么这官方的解释可能有点懵，其实直白来讲其实数组就是一张哈希表。</p>\n<p>哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素，如下图所示：</p>\n<p><img src=\"C:/Files/markdown-images/202301301020454.png\" alt=\"哈希表1\" loading=\"lazy\" class=\"φbp\"></p>\n<p>那么哈希表能解决什么问题呢，<strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong></p>\n<p>例如要查询一个名字是否在这所学校里。</p>\n<p>要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。</p>\n<p>我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p>\n<p>将学生姓名映射到哈希表上就涉及到了<strong>hash function ，也就是哈希函数</strong>。</p>\n<h2 id=\"哈希函数\">哈希函数<a title=\"#哈希函数\" href=\"#哈希函数\"></a></h2>\n<p>哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。</p>\n<p>哈希函数如下图所示，通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p>\n<p><img src=\"C:/Files/markdown-images/202301301020623.png\" alt=\"哈希表2\" loading=\"lazy\" class=\"φbp\"></p>\n<p>如果hashCode得到的数值大于 哈希表的大小了，也就是大于tableSize了，怎么办呢？</p>\n<p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。</p>\n<p>此时问题又来了，哈希表我们刚刚说过，就是一个数组。</p>\n<p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p>\n<p>接下来<strong>哈希碰撞</strong>登场</p>\n<h3 id=\"哈希碰撞\">哈希碰撞<a title=\"#哈希碰撞\" href=\"#哈希碰撞\"></a></h3>\n<p>如图所示，小李和小王都映射到了索引下标 1 的位置，<strong>这一现象叫做哈希碰撞</strong>。</p>\n<p><img src=\"C:/Files/markdown-images/202301301020483.png\" alt=\"哈希表3\" loading=\"lazy\" class=\"φbp\"></p>\n<p>一般哈希碰撞有两种解决方法， 拉链法和线性探测法。</p>\n<h3 id=\"拉链法\">拉链法<a title=\"#拉链法\" href=\"#拉链法\"></a></h3>\n<p>刚刚小李和小王在索引1的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了</p>\n<p><img src=\"C:/Files/markdown-images/202301301020452.png\" alt=\"哈希表4\" loading=\"lazy\" class=\"φbp\"></p>\n<p>（数据规模是dataSize， 哈希表的大小为tableSize）</p>\n<p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p>\n<h3 id=\"线性探测法\">线性探测法<a title=\"#线性探测法\" href=\"#线性探测法\"></a></h3>\n<p>使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p>\n<p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：</p>\n<p><img src=\"C:/Files/markdown-images/202301301020445.png\" alt=\"哈希表5\" loading=\"lazy\" class=\"φbp\"></p>\n<p>其实关于哈希碰撞还有非常多的细节，感兴趣的同学可以再好好研究一下，这里我就不再赘述了。</p>\n<h2 id=\"常见的三种哈希结构\">常见的三种哈希结构<a title=\"#常见的三种哈希结构\" href=\"#常见的三种哈希结构\"></a></h2>\n<p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p>\n<ul>\n<li>数组</li>\n<li>set （集合）</li>\n<li>map(映射)</li>\n</ul>\n<p>这里数组就没啥可说的了，我们来看一下set。</p>\n<p>在C++中，set 和 map 分别提供以下三种数据结构，其底层实现以及优劣如下表所示：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>集合</th>\n<th>底层实现</th>\n<th>是否有序</th>\n<th>数值是否可以重复</th>\n<th>能否更改数值</th>\n<th>查询效率</th>\n<th>增删效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std::set</td>\n<td>红黑树</td>\n<td>有序</td>\n<td>否</td>\n<td>否</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td>std::multiset</td>\n<td>红黑树</td>\n<td>有序</td>\n<td>是</td>\n<td>否</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>std::unordered_set</td>\n<td>哈希表</td>\n<td>无序</td>\n<td>否</td>\n<td>否</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table></div></div><p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>映射</th>\n<th>底层实现</th>\n<th>是否有序</th>\n<th>数值是否可以重复</th>\n<th>能否更改数值</th>\n<th>查询效率</th>\n<th>增删效率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std::map</td>\n<td>红黑树</td>\n<td>key有序</td>\n<td>key不可重复</td>\n<td>key不可修改</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>std::multimap</td>\n<td>红黑树</td>\n<td>key有序</td>\n<td>key可重复</td>\n<td>key不可修改</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td>std::unordered_map</td>\n<td>哈希表</td>\n<td>key无序</td>\n<td>key不可重复</td>\n<td>key不可修改</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table></div></div><p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。</p>\n<p>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p>\n<p>那么再来看一下map ，在map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p>\n<p>其他语言例如：java里的HashMap ，TreeMap 都是一样的原理。可以灵活贯通。</p>\n<p>虽然std::set、std::multiset 的底层实现是红黑树，不是哈希表，std::set、std::multiset 使用红黑树来索引和存储，不过给我们的使用方式，还是哈希法的使用方式，即key和value。所以使用这些数据结构来解决映射问题的方法，我们依然称之为哈希法。 map也是一样的道理。</p>\n<p>这里在说一下，一些C++的经典书籍上 例如STL源码剖析，说到了hash_set hash_map，这个与unordered_set，unordered_map又有什么关系呢？</p>\n<p>实际上功能都是一样一样的， 但是unordered_set在C++11的时候被引入标准库了，而hash_set并没有，所以建议还是使用unordered_set比较好，这就好比一个是官方认证的，hash_set，hash_map 是C++11标准之前民间高手自发造的轮子。</p>\n<p><img src=\"C:/Files/markdown-images/202301301020508.png\" alt=\"哈希表6\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>总结一下，<strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。</p>\n<p>但是哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p>\n<p>如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</p>\n","link":"leetcode/哈希表理论基础","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/哈希表理论基础/","toc":[{"id":"哈希表","title":"哈希表","index":"1"},{"id":"哈希函数","title":"哈希函数","index":"2"},{"id":"常见的三种哈希结构","title":"常见的三种哈希结构","index":"3"},{"id":"总结","title":"总结","index":"4"}],"reward":true,"copyright":{"published":"January 30, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/哈希表理论基础/\" title=\"哈希表理论基础\">https://hs-zhangsan.github.io/leetcode/哈希表理论基础/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}