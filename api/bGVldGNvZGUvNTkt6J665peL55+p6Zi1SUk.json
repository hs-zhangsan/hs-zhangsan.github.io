{"title":"59-螺旋矩阵II","date":"2023-01-22T09:20:15.000Z","date_formatted":{"ll":"Jan 22, 2023","L":"01/22/2023","MM-DD":"01-22"},"updated":"2023-03-31T11:45:37.373Z","content":"<p><a href=\"leetcode\"><strong>【目录】</strong></a> | <a href=\"https://leetcode.cn/problems/spiral-matrix-ii\" target=\"_blank\">力扣链接</a> | <a href=\"https://leetcode.cn/problems/spiral-matrix-ii/solution/by-taisui-01ae/\" target=\"_blank\">力扣题解链接</a></p>\n<h1 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h1>\n<p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p>\n<p>示例 1：</p>\n<p><img src=\"C:/Files/markdown-images/202301220940002.jpeg\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 3</span><br><span class=\"line\">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 1</span><br><span class=\"line\">输出：[[1]]</span><br></pre></td></tr></table></figure>\n<h1 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h1>\n<h3 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h3>\n<ul>\n<li>\n<p>本题并不涉及到什么算法，就是模拟过程，值得注意的一点是，在写代码的过程中一定要遵循<strong>循环不变量原则</strong>，和 <a href=\"leetcode/704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\">二分查找</a> 中一样，遇到其他情况也是一样。在本题中我统一用左闭右开。</p>\n</li>\n<li>\n<p>具体模拟一下模拟顺时针画矩阵的过程（如图）:</p>\n<ul>\n<li>填充上行从左到右</li>\n<li>填充右列从上到下</li>\n<li>填充下行从右到左</li>\n<li>填充左列从下到上</li>\n</ul>\n<p><img src=\"C:/Files/markdown-images/202301221110126.jpg\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n<li>\n<p>思路很简单，就是从最外圈开始循环，走过一圈后向内圈进一个再继续，直到最后走完。具体看代码，已经详细注释，很容易就能看明白。</p>\n</li>\n</ul>\n<h3 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return an array of arrays of size *returnSize.</span></span><br><span class=\"line\"><span class=\"comment\"> * The sizes of the arrays are returned as *returnColumnSizes array.</span></span><br><span class=\"line\"><span class=\"comment\"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span>** <span class=\"title function_\">generateMatrix</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span>* returnSize, <span class=\"type\">int</span>** returnColumnSizes)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先申请数组并申请空间，其他语言可能不用</span></span><br><span class=\"line\">    <span class=\"type\">int</span>** result = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>*) * n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        result[i] = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> loop = n / <span class=\"number\">2</span>;\t<span class=\"comment\">//用来确定循环的圈数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> offset = <span class=\"number\">1</span>;\t<span class=\"comment\">//用来确定每条边遍历的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">1</span>;\t<span class=\"comment\">//用来给矩阵赋值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> startX = <span class=\"number\">0</span>, startY = <span class=\"number\">0</span>;\t<span class=\"comment\">//用来确定每个圈开始循环的起始位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//若 n 为奇数，则需单独给最中间的位置赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        result[loop][loop] = n * n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//下面就是这道题的核心代码，模拟循环的过程</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (loop--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = startX;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = startY;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//下面四个循环就是模拟每圈的四个边转了一圈，都是左闭右开</span></span><br><span class=\"line\">        <span class=\"comment\">//模拟上行从左到右</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; n - offset) &#123;</span><br><span class=\"line\">            result[i][j++] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//模拟右列从上到下</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n - offset) &#123;</span><br><span class=\"line\">            result[i++][j] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//模拟下行从右到左</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; startY) &#123;</span><br><span class=\"line\">            result[i][j--] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//模拟左列从下到上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; startY) &#123;</span><br><span class=\"line\">            result[i--][j] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//每圈结束之后，起始位置各自加一。例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span></span><br><span class=\"line\">        startX++;</span><br><span class=\"line\">        startY++;</span><br><span class=\"line\">        <span class=\"comment\">//用来控制每圈每条边的遍历长度，每走一圈就加一。</span></span><br><span class=\"line\">        offset++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *returnSize = n;</span><br><span class=\"line\">    *returnColumnSizes = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        (*returnColumnSizes)[i] = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h1>\n<p>还是比较难，也不是一眼就看懂了，之前做过两遍，但还是不熟。</p>\n<h1 id=\"相关题目\">相关题目<a title=\"#相关题目\" href=\"#相关题目\"></a></h1>\n<ul>\n<li>54.螺旋矩阵</li>\n<li>剑指Offer 29.顺时针打印矩阵</li>\n</ul>\n","link":"leetcode/59-螺旋矩阵II","comments":true,"plink":"https://hs-zhangsan.github.io/leetcode/59-螺旋矩阵II/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"题解","title":"题解","index":"2"},{"id":"总结","title":"总结","index":"3"},{"id":"相关题目","title":"相关题目","index":"4"}],"reward":true,"copyright":{"published":"January 22, 2023","updated":"March 31, 2023","author":"zhangsan","link":"<a href=\"https://hs-zhangsan.github.io/leetcode/59-螺旋矩阵II/\" title=\"59-螺旋矩阵II\">https://hs-zhangsan.github.io/leetcode/59-螺旋矩阵II/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}